10 Days for Trees !

ğŸ“Œ Day 1
Read the theory of Binary Trees and different types of Binary Trees
Understand the Node structure of Binary Tree

ğŸ“” Understand and Write Iterative code for following
ğŸ“” Level Order Traversal
ğŸ“” Inorder Traversal - Leetcode 194
ğŸ“” PreOrder Traversal
ğŸ“” Postorder Traversal
ğŸ“” Zig Zag Level Oder Traversal

ğŸ“Œ Day 2
Implement Binary Tree
ğŸ“” Add Node
ğŸ“” Remove Node
ğŸ“” Traverse Node
ğŸ“” Construct Binary Tree from Inorder and PostOrder - https://lnkd.in/g5QD5zeA

ğŸ“Œ Day 3
ğŸ“” Same Tree - https://lnkd.in/gcyPqTq3
ğŸ“” Invert Binary Tree - https://lnkd.in/gYm_VVxU
ğŸ“” Symmetric Binary Tree - https://lnkd.in/gHfDZGXP
ğŸ“” Left/Bottom/Top View of Binary Tree
ğŸ“” Vertical Order Traversal of a Binary Tree - https://lnkd.in/gXjFhx5g

ğŸ“Œ Day 4
ğŸ“” Maximum Width of Binary Tree - Leetcode 622
ğŸ“” Maximum Depth of Binary Tree - Leetcode 104
ğŸ“” Diameter of Binary Tree - Leetcode 543
ğŸ“” Balanced Binary Tree - Leetcode 110
ğŸ“” Lowest Common Ancestor of a Binary Tree - Leetcode 236

ğŸ“Œ Day 5
ğŸ“” Identify Path to given Node 
ğŸ“” Binary Tree Maximum Path Sum - Leetcode 124
ğŸ“” Flatten Binary Tree to Linked List - Leetcode 1114
ğŸ“” Mirror Binary Tree
ğŸ“” Serialize and Deserialize Binary Tree - Leetcode 297
ğŸ“” Vertical Sum of Nodes in Binary Tree

ğŸ“Œ Day 6
ğŸ“” Understand Binary Search Tree
ğŸ“” Search an Element in BST - Leetcode 700
ğŸ“” Understand Complexity of searching in BST
ğŸ“” Find Lowest Common Ancestor of given node in BST - Leetcode 235
ğŸ“” Convert Sorted Array to Binary Search Tree - Leetcode 108
ğŸ“” Validate Binary Search Tree - Leetcode 98

ğŸ“Œ Day 7
ğŸ“” Construct BST from Preorder Traversal - Leetcode 1008
ğŸ“” Recover BST - Leetcode 99
ğŸ“” Identify Predecessor and Successor of of a Node in BST
ğŸ“” Kth Smallest Element in a BST
ğŸ“” Two Sum - Input is BST - Leetcode 653

ğŸ“Œ Day 8
ğŸ“” Understand Self Balancing Binary Search Trees
ğŸ“” Read and Understand Red Black Tree
ğŸ“” Read and Understand AVL Tree

ğŸ“Œ Day 9
ğŸ“” Understand about Quad trees and N-Ary Trees
ğŸ“” Understand Trie Data Structure 
ğŸ“” Implement Trie (Prefix Tree)

ğŸ“Œ Day 10
ğŸ“” Maximum XOR of Two Numbers in an Array - https://lnkd.in/gnNYmZdh
ğŸ“” Maximum XOR With an Element From Array - https://lnkd.in/gEw-PkqR

#trees #programming #complexity #coding #dsa #algorithms #datastructuresandalgorithms #datastructures
